<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class CachedCiviContainer_d481eeb616462539acad9e3f71a82f94 extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'cache.settings' => true,
            'dispatcher.boot' => true,
            'lockManager' => true,
            'paths' => true,
            'runtime' => true,
            'settings_manager' => true,
            'userPermissionClass' => true,
            'userSystem' => true,
        ];
        $this->methodMap = [
            'CRM_Activity_ActionMapping' => 'getCRMActivityActionMappingService',
            'CRM_Contact_ActionMapping' => 'getCRMContactActionMappingService',
            'CRM_Contribute_ActionMapping_ByPage' => 'getCRMContributeActionMappingByPageService',
            'CRM_Contribute_ActionMapping_ByType' => 'getCRMContributeActionMappingByTypeService',
            'CRM_Event_ActionMapping_ByEvent' => 'getCRMEventActionMappingByEventService',
            'CRM_Event_ActionMapping_ByTemplate' => 'getCRMEventActionMappingByTemplateService',
            'CRM_Event_ActionMapping_ByType' => 'getCRMEventActionMappingByTypeService',
            'CRM_Member_ActionMapping' => 'getCRMMemberActionMappingService',
            'Civi\\AfformReCaptcha2' => 'getAfformReCaptcha2Service',
            'Civi\\Api4\\Event\\Subscriber\\AutocompleteFieldSubscriber' => 'getAutocompleteFieldSubscriberService',
            'Civi\\Api4\\Event\\Subscriber\\DefaultDisplaySubscriber' => 'getDefaultDisplaySubscriberService',
            'Civi\\Api4\\Event\\Subscriber\\SKEntitySubscriber' => 'getSKEntitySubscriberService',
            'Civi\\Api4\\Event\\Subscriber\\SearchDisplayTasksSubscriber' => 'getSearchDisplayTasksSubscriberService',
            'Civi\\Api4\\Provider\\CustomEntityProvider' => 'getCustomEntityProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\ActivityAutocompleteProvider' => 'getActivityAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\AddressAutocompleteProvider' => 'getAddressAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\CaseAutocompleteProvider' => 'getCaseAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\ContactAutocompleteProvider' => 'getContactAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\ContactTypeAutocompleteProvider' => 'getContactTypeAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\ContributionAutocompleteProvider' => 'getContributionAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\ContributionRecurAutocompleteProvider' => 'getContributionRecurAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\CountryAutocompleteProvider' => 'getCountryAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\EntityAutocompleteProvider' => 'getEntityAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\EventAutocompleteProvider' => 'getEventAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\MailingRecipientsAutocompleteProvider' => 'getMailingRecipientsAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\OptionValueAutocompleteProvider' => 'getOptionValueAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\PledgeAutocompleteProvider' => 'getPledgeAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\RelationshipAutocompleteProvider' => 'getRelationshipAutocompleteProviderService',
            'Civi\\Api4\\Service\\Autocomplete\\StateProvinceAutocompleteProvider' => 'getStateProvinceAutocompleteProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ACLCreationSpecProvider' => 'getACLCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ActionScheduleSpecProvider' => 'getActionScheduleSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ActivitySpecProvider' => 'getActivitySpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\AddressCreationSpecProvider' => 'getAddressCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\AddressGetSpecProvider' => 'getAddressGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\BatchCreationSpecProvider' => 'getBatchCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ContactCreationSpecProvider' => 'getContactCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ContactGetSpecProvider' => 'getContactGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ContactTypeCreationSpecProvider' => 'getContactTypeCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ContributionCreationSpecProvider' => 'getContributionCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ContributionGetSpecProvider' => 'getContributionGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ContributionRecurCreationSpecProvider' => 'getContributionRecurCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\CustomFieldCreationSpecProvider' => 'getCustomFieldCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\CustomValueSpecProvider' => 'getCustomValueSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\DefaultLocationTypeProvider' => 'getDefaultLocationTypeProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\DomainCreationSpecProvider' => 'getDomainCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\DomainGetSpecProvider' => 'getDomainGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\EmailCreationSpecProvider' => 'getEmailCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\EmailGetSpecProvider' => 'getEmailGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\EntityBatchCreationSpecProvider' => 'getEntityBatchCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\EntityTagCreationSpecProvider' => 'getEntityTagCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\EntityTagFilterSpecProvider' => 'getEntityTagFilterSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\EventCreationSpecProvider' => 'getEventCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\FieldCurrencySpecProvider' => 'getFieldCurrencySpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\FieldDomainIdSpecProvider' => 'getFieldDomainIdSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\FinancialItemCreationSpecProvider' => 'getFinancialItemCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\FinancialTrxnCreationSpecProvider' => 'getFinancialTrxnCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\GetActionDefaultsProvider' => 'getGetActionDefaultsProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\GroupContactCreationSpecProvider' => 'getGroupContactCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\GroupCreationSpecProvider' => 'getGroupCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\GroupGetSpecProvider' => 'getGroupGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\IMCreationSpecProvider' => 'getIMCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\IsCurrentFieldSpecProvider' => 'getIsCurrentFieldSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\MailingGetSpecProvider' => 'getMailingGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\ManagedEntitySpecProvider' => 'getManagedEntitySpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\MembershipCreationSpecProvider' => 'getMembershipCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\MembershipTypeCreationSpecProvider' => 'getMembershipTypeCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\MessageTemplateGetSpecProvider' => 'getMessageTemplateGetSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\NavigationSpecProvider' => 'getNavigationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\NoteCreationSpecProvider' => 'getNoteCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\OptionValueCreationSpecProvider' => 'getOptionValueCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\PaymentProcessorCreationSpecProvider' => 'getPaymentProcessorCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\PaymentProcessorTypeCreationSpecProvider' => 'getPaymentProcessorTypeCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\PhoneCreationSpecProvider' => 'getPhoneCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\PriceFieldValueCreationSpecProvider' => 'getPriceFieldValueCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\RelationshipCacheSpecProvider' => 'getRelationshipCacheSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\RelationshipTypeCreationSpecProvider' => 'getRelationshipTypeCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\SKEntitySpecProvider' => 'getSKEntitySpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\SearchDisplayCreationSpecProvider' => 'getSearchDisplayCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\SearchSegmentExtraFieldProvider' => 'getSearchSegmentExtraFieldProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\SearchSegmentSpecProvider' => 'getSearchSegmentSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\TagCreationSpecProvider' => 'getTagCreationSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\TitleFieldSpecProvider' => 'getTitleFieldSpecProviderService',
            'Civi\\Api4\\Service\\Spec\\Provider\\UFFieldCreationSpecProvider' => 'getUFFieldCreationSpecProviderService',
            'Civi\\WorkflowMessage\\TestBanner' => 'getTestBannerService',
            'action_object_provider' => 'getActionObjectProviderService',
            'angular' => 'getAngularService',
            'angularjs.loader' => 'getAngularjs_LoaderService',
            'asset_builder' => 'getAssetBuilderService',
            'bundle.bootstrap3' => 'getBundle_Bootstrap3Service',
            'bundle.coreResources' => 'getBundle_CoreResourcesService',
            'bundle.coreStyles' => 'getBundle_CoreStylesService',
            'cache.checks' => 'getCache_ChecksService',
            'cache.community_messages' => 'getCache_CommunityMessagesService',
            'cache.contactTypes' => 'getCache_ContactTypesService',
            'cache.customData' => 'getCache_CustomDataService',
            'cache.default' => 'getCache_DefaultService',
            'cache.extension_browser' => 'getCache_ExtensionBrowserService',
            'cache.fields' => 'getCache_FieldsService',
            'cache.groups' => 'getCache_GroupsService',
            'cache.js_strings' => 'getCache_JsStringsService',
            'cache.long' => 'getCache_LongService',
            'cache.metadata' => 'getCache_MetadataService',
            'cache.navigation' => 'getCache_NavigationService',
            'cache.prevNextCache' => 'getCache_PrevNextCacheService',
            'cache.session' => 'getCache_SessionService',
            'cache_config' => 'getCacheConfigService',
            'civi.activity.triggers' => 'getCivi_Activity_TriggersService',
            'civi.api4.activitySchema' => 'getCivi_Api4_ActivitySchemaService',
            'civi.api4.contactSchema' => 'getCivi_Api4_ContactSchemaService',
            'civi.api4.isCurrent' => 'getCivi_Api4_IsCurrentService',
            'civi.api4.messagetemplateSchema' => 'getCivi_Api4_MessagetemplateSchemaService',
            'civi.api4.permissionCheck' => 'getCivi_Api4_PermissionCheckService',
            'civi.api4.searchKit' => 'getCivi_Api4_SearchKitService',
            'civi.api4.validateFields' => 'getCivi_Api4_ValidateFieldsService',
            'civi.case.staticTriggers' => 'getCivi_Case_StaticTriggersService',
            'civi.case.triggers' => 'getCivi_Case_TriggersService',
            'civi.pipe' => 'getCivi_PipeService',
            'civi_api_kernel' => 'getCiviApiKernelService',
            'civi_flexmailer_abdicator' => 'getCiviFlexmailerAbdicatorService',
            'civi_flexmailer_api_overrides' => 'getCiviFlexmailerApiOverridesService',
            'civi_flexmailer_attachments' => 'getCiviFlexmailerAttachmentsService',
            'civi_flexmailer_basic_headers' => 'getCiviFlexmailerBasicHeadersService',
            'civi_flexmailer_bounce_tracker' => 'getCiviFlexmailerBounceTrackerService',
            'civi_flexmailer_default_batcher' => 'getCiviFlexmailerDefaultBatcherService',
            'civi_flexmailer_default_composer' => 'getCiviFlexmailerDefaultComposerService',
            'civi_flexmailer_default_sender' => 'getCiviFlexmailerDefaultSenderService',
            'civi_flexmailer_hooks' => 'getCiviFlexmailerHooksService',
            'civi_flexmailer_html_click_tracker' => 'getCiviFlexmailerHtmlClickTrackerService',
            'civi_flexmailer_open_tracker' => 'getCiviFlexmailerOpenTrackerService',
            'civi_flexmailer_required_fields' => 'getCiviFlexmailerRequiredFieldsService',
            'civi_flexmailer_required_tokens' => 'getCiviFlexmailerRequiredTokensService',
            'civi_flexmailer_test_prefix' => 'getCiviFlexmailerTestPrefixService',
            'civi_flexmailer_text_click_tracker' => 'getCiviFlexmailerTextClickTrackerService',
            'civi_flexmailer_to_header' => 'getCiviFlexmailerToHeaderService',
            'civi_token_compat' => 'getCiviTokenCompatService',
            'civi_token_impliedcontext' => 'getCiviTokenImpliedcontextService',
            'crm_activity_tokens' => 'getCrmActivityTokensService',
            'crm_case_tokens' => 'getCrmCaseTokensService',
            'crm_contact_tokens' => 'getCrmContactTokensService',
            'crm_contribute_tokens' => 'getCrmContributeTokensService',
            'crm_contribution_recur_tokens' => 'getCrmContributionRecurTokensService',
            'crm_domain_tokens' => 'getCrmDomainTokensService',
            'crm_event_tokens' => 'getCrmEventTokensService',
            'crm_group_tokens' => 'getCrmGroupTokensService',
            'crm_mailing_action_tokens' => 'getCrmMailingActionTokensService',
            'crm_mailing_tokens' => 'getCrmMailingTokensService',
            'crm_member_tokens' => 'getCrmMemberTokensService',
            'crm_participant_tokens' => 'getCrmParticipantTokensService',
            'crm_pledge_tokens' => 'getCrmPledgeTokensService',
            'crm_survey_tokens' => 'getCrmSurveyTokensService',
            'crm_token_tidy' => 'getCrmTokenTidyService',
            'crypto.jwt' => 'getCrypto_JwtService',
            'crypto.registry' => 'getCrypto_RegistryService',
            'crypto.token' => 'getCrypto_TokenService',
            'cxn_reg_client' => 'getCxnRegClientService',
            'dispatcher' => 'getDispatcherService',
            'esm.import_map' => 'getEsm_ImportMapService',
            'esm.loader' => 'getEsm_LoaderService',
            'esm.loader.browser' => 'getEsm_Loader_BrowserService',
            'esm.loader.shim-fast' => 'getEsm_Loader_ShimfastService',
            'esm.loader.shim-slow' => 'getEsm_Loader_ShimslowService',
            'format' => 'getFormatService',
            'httpClient' => 'getHttpClientService',
            'i18n' => 'getI18nService',
            'magic_function_provider' => 'getMagicFunctionProviderService',
            'pear_mail' => 'getPearMailService',
            'prevnext' => 'getPrevnextService',
            'prevnext.driver.redis' => 'getPrevnext_Driver_RedisService',
            'prevnext.driver.sql' => 'getPrevnext_Driver_SqlService',
            'psr_log' => 'getPsrLogService',
            'psr_log_manager' => 'getPsrLogManagerService',
            'resources' => 'getResourcesService',
            'resources.js_strings' => 'getResources_JsStringsService',
            'schema_map_builder' => 'getSchemaMapBuilderService',
            'spec_gatherer' => 'getSpecGathererService',
            'sql_triggers' => 'getSqlTriggersService',
            'themes' => 'getThemesService',
        ];
        $this->aliases = [
            'cache.short' => 'cache.default',
            'event_dispatcher' => 'dispatcher',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'civi_container_factory' => true,
        ];
    }

    /**
     * Gets the public 'CRM_Activity_ActionMapping' shared service.
     *
     * @return \CRM_Activity_ActionMapping
     */
    protected static function getCRMActivityActionMappingService($container)
    {
        return $container->services['CRM_Activity_ActionMapping'] = new \CRM_Activity_ActionMapping();
    }

    /**
     * Gets the public 'CRM_Contact_ActionMapping' shared service.
     *
     * @return \CRM_Contact_ActionMapping
     */
    protected static function getCRMContactActionMappingService($container)
    {
        return $container->services['CRM_Contact_ActionMapping'] = new \CRM_Contact_ActionMapping();
    }

    /**
     * Gets the public 'CRM_Contribute_ActionMapping_ByPage' shared service.
     *
     * @return \CRM_Contribute_ActionMapping_ByPage
     */
    protected static function getCRMContributeActionMappingByPageService($container)
    {
        return $container->services['CRM_Contribute_ActionMapping_ByPage'] = new \CRM_Contribute_ActionMapping_ByPage();
    }

    /**
     * Gets the public 'CRM_Contribute_ActionMapping_ByType' shared service.
     *
     * @return \CRM_Contribute_ActionMapping_ByType
     */
    protected static function getCRMContributeActionMappingByTypeService($container)
    {
        return $container->services['CRM_Contribute_ActionMapping_ByType'] = new \CRM_Contribute_ActionMapping_ByType();
    }

    /**
     * Gets the public 'CRM_Event_ActionMapping_ByEvent' shared service.
     *
     * @return \CRM_Event_ActionMapping_ByEvent
     */
    protected static function getCRMEventActionMappingByEventService($container)
    {
        return $container->services['CRM_Event_ActionMapping_ByEvent'] = new \CRM_Event_ActionMapping_ByEvent();
    }

    /**
     * Gets the public 'CRM_Event_ActionMapping_ByTemplate' shared service.
     *
     * @return \CRM_Event_ActionMapping_ByTemplate
     */
    protected static function getCRMEventActionMappingByTemplateService($container)
    {
        return $container->services['CRM_Event_ActionMapping_ByTemplate'] = new \CRM_Event_ActionMapping_ByTemplate();
    }

    /**
     * Gets the public 'CRM_Event_ActionMapping_ByType' shared service.
     *
     * @return \CRM_Event_ActionMapping_ByType
     */
    protected static function getCRMEventActionMappingByTypeService($container)
    {
        return $container->services['CRM_Event_ActionMapping_ByType'] = new \CRM_Event_ActionMapping_ByType();
    }

    /**
     * Gets the public 'CRM_Member_ActionMapping' shared service.
     *
     * @return \CRM_Member_ActionMapping
     */
    protected static function getCRMMemberActionMappingService($container)
    {
        return $container->services['CRM_Member_ActionMapping'] = new \CRM_Member_ActionMapping();
    }

    /**
     * Gets the public 'Civi\AfformReCaptcha2' shared service.
     *
     * @return \Civi\AfformReCaptcha2
     */
    protected static function getAfformReCaptcha2Service($container)
    {
        return $container->services['Civi\\AfformReCaptcha2'] = new \Civi\AfformReCaptcha2();
    }

    /**
     * Gets the public 'Civi\Api4\Event\Subscriber\AutocompleteFieldSubscriber' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\AutocompleteFieldSubscriber
     */
    protected static function getAutocompleteFieldSubscriberService($container)
    {
        return $container->services['Civi\\Api4\\Event\\Subscriber\\AutocompleteFieldSubscriber'] = new \Civi\Api4\Event\Subscriber\AutocompleteFieldSubscriber();
    }

    /**
     * Gets the public 'Civi\Api4\Event\Subscriber\DefaultDisplaySubscriber' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\DefaultDisplaySubscriber
     */
    protected static function getDefaultDisplaySubscriberService($container)
    {
        return $container->services['Civi\\Api4\\Event\\Subscriber\\DefaultDisplaySubscriber'] = new \Civi\Api4\Event\Subscriber\DefaultDisplaySubscriber();
    }

    /**
     * Gets the public 'Civi\Api4\Event\Subscriber\SKEntitySubscriber' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\SKEntitySubscriber
     */
    protected static function getSKEntitySubscriberService($container)
    {
        return $container->services['Civi\\Api4\\Event\\Subscriber\\SKEntitySubscriber'] = new \Civi\Api4\Event\Subscriber\SKEntitySubscriber();
    }

    /**
     * Gets the public 'Civi\Api4\Event\Subscriber\SearchDisplayTasksSubscriber' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\SearchDisplayTasksSubscriber
     */
    protected static function getSearchDisplayTasksSubscriberService($container)
    {
        return $container->services['Civi\\Api4\\Event\\Subscriber\\SearchDisplayTasksSubscriber'] = new \Civi\Api4\Event\Subscriber\SearchDisplayTasksSubscriber();
    }

    /**
     * Gets the public 'Civi\Api4\Provider\CustomEntityProvider' shared service.
     *
     * @return \Civi\Api4\Provider\CustomEntityProvider
     */
    protected static function getCustomEntityProviderService($container)
    {
        return $container->services['Civi\\Api4\\Provider\\CustomEntityProvider'] = new \Civi\Api4\Provider\CustomEntityProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\ActivityAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\ActivityAutocompleteProvider
     */
    protected static function getActivityAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\ActivityAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\ActivityAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\AddressAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\AddressAutocompleteProvider
     */
    protected static function getAddressAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\AddressAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\AddressAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\CaseAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\CaseAutocompleteProvider
     */
    protected static function getCaseAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\CaseAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\CaseAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\ContactAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\ContactAutocompleteProvider
     */
    protected static function getContactAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\ContactAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\ContactAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\ContactTypeAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\ContactTypeAutocompleteProvider
     */
    protected static function getContactTypeAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\ContactTypeAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\ContactTypeAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\ContributionAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\ContributionAutocompleteProvider
     */
    protected static function getContributionAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\ContributionAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\ContributionAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\ContributionRecurAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\ContributionRecurAutocompleteProvider
     */
    protected static function getContributionRecurAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\ContributionRecurAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\ContributionRecurAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\CountryAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\CountryAutocompleteProvider
     */
    protected static function getCountryAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\CountryAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\CountryAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\EntityAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\EntityAutocompleteProvider
     */
    protected static function getEntityAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\EntityAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\EntityAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\EventAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\EventAutocompleteProvider
     */
    protected static function getEventAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\EventAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\EventAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\MailingRecipientsAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\MailingRecipientsAutocompleteProvider
     */
    protected static function getMailingRecipientsAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\MailingRecipientsAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\MailingRecipientsAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\OptionValueAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\OptionValueAutocompleteProvider
     */
    protected static function getOptionValueAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\OptionValueAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\OptionValueAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\PledgeAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\PledgeAutocompleteProvider
     */
    protected static function getPledgeAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\PledgeAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\PledgeAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\RelationshipAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\RelationshipAutocompleteProvider
     */
    protected static function getRelationshipAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\RelationshipAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\RelationshipAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Autocomplete\StateProvinceAutocompleteProvider' shared service.
     *
     * @return \Civi\Api4\Service\Autocomplete\StateProvinceAutocompleteProvider
     */
    protected static function getStateProvinceAutocompleteProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Autocomplete\\StateProvinceAutocompleteProvider'] = new \Civi\Api4\Service\Autocomplete\StateProvinceAutocompleteProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ACLCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ACLCreationSpecProvider
     */
    protected static function getACLCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ACLCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ACLCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ActionScheduleSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ActionScheduleSpecProvider
     */
    protected static function getActionScheduleSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ActionScheduleSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ActionScheduleSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ActivitySpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ActivitySpecProvider
     */
    protected static function getActivitySpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ActivitySpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ActivitySpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\AddressCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\AddressCreationSpecProvider
     */
    protected static function getAddressCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\AddressCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\AddressCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\AddressGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\AddressGetSpecProvider
     */
    protected static function getAddressGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\AddressGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\AddressGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\BatchCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\BatchCreationSpecProvider
     */
    protected static function getBatchCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\BatchCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\BatchCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ContactCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ContactCreationSpecProvider
     */
    protected static function getContactCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContactCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ContactCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ContactGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ContactGetSpecProvider
     */
    protected static function getContactGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContactGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ContactGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ContactTypeCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ContactTypeCreationSpecProvider
     */
    protected static function getContactTypeCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContactTypeCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ContactTypeCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ContributionCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ContributionCreationSpecProvider
     */
    protected static function getContributionCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContributionCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ContributionCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ContributionGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ContributionGetSpecProvider
     */
    protected static function getContributionGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContributionGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ContributionGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ContributionRecurCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ContributionRecurCreationSpecProvider
     */
    protected static function getContributionRecurCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContributionRecurCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ContributionRecurCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\CustomFieldCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\CustomFieldCreationSpecProvider
     */
    protected static function getCustomFieldCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\CustomFieldCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\CustomFieldCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\CustomValueSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\CustomValueSpecProvider
     */
    protected static function getCustomValueSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\CustomValueSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\CustomValueSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\DefaultLocationTypeProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\DefaultLocationTypeProvider
     */
    protected static function getDefaultLocationTypeProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\DefaultLocationTypeProvider'] = new \Civi\Api4\Service\Spec\Provider\DefaultLocationTypeProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\DomainCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\DomainCreationSpecProvider
     */
    protected static function getDomainCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\DomainCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\DomainCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\DomainGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\DomainGetSpecProvider
     */
    protected static function getDomainGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\DomainGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\DomainGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\EmailCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\EmailCreationSpecProvider
     */
    protected static function getEmailCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\EmailCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\EmailCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\EmailGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\EmailGetSpecProvider
     */
    protected static function getEmailGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\EmailGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\EmailGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\EntityBatchCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\EntityBatchCreationSpecProvider
     */
    protected static function getEntityBatchCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\EntityBatchCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\EntityBatchCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\EntityTagCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\EntityTagCreationSpecProvider
     */
    protected static function getEntityTagCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\EntityTagCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\EntityTagCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\EntityTagFilterSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\EntityTagFilterSpecProvider
     */
    protected static function getEntityTagFilterSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\EntityTagFilterSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\EntityTagFilterSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\EventCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\EventCreationSpecProvider
     */
    protected static function getEventCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\EventCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\EventCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\FieldCurrencySpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\FieldCurrencySpecProvider
     */
    protected static function getFieldCurrencySpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\FieldCurrencySpecProvider'] = new \Civi\Api4\Service\Spec\Provider\FieldCurrencySpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\FieldDomainIdSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\FieldDomainIdSpecProvider
     */
    protected static function getFieldDomainIdSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\FieldDomainIdSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\FieldDomainIdSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\FinancialItemCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\FinancialItemCreationSpecProvider
     */
    protected static function getFinancialItemCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\FinancialItemCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\FinancialItemCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\FinancialTrxnCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\FinancialTrxnCreationSpecProvider
     */
    protected static function getFinancialTrxnCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\FinancialTrxnCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\FinancialTrxnCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\GetActionDefaultsProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\GetActionDefaultsProvider
     */
    protected static function getGetActionDefaultsProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\GetActionDefaultsProvider'] = new \Civi\Api4\Service\Spec\Provider\GetActionDefaultsProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\GroupContactCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\GroupContactCreationSpecProvider
     */
    protected static function getGroupContactCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\GroupContactCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\GroupContactCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\GroupCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\GroupCreationSpecProvider
     */
    protected static function getGroupCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\GroupCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\GroupCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\GroupGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\GroupGetSpecProvider
     */
    protected static function getGroupGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\GroupGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\GroupGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\IMCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\IMCreationSpecProvider
     */
    protected static function getIMCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\IMCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\IMCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\IsCurrentFieldSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\IsCurrentFieldSpecProvider
     */
    protected static function getIsCurrentFieldSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\IsCurrentFieldSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\IsCurrentFieldSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\MailingGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\MailingGetSpecProvider
     */
    protected static function getMailingGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\MailingGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\MailingGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\ManagedEntitySpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\ManagedEntitySpecProvider
     */
    protected static function getManagedEntitySpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\ManagedEntitySpecProvider'] = new \Civi\Api4\Service\Spec\Provider\ManagedEntitySpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\MembershipCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\MembershipCreationSpecProvider
     */
    protected static function getMembershipCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\MembershipCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\MembershipCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\MembershipTypeCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\MembershipTypeCreationSpecProvider
     */
    protected static function getMembershipTypeCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\MembershipTypeCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\MembershipTypeCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\MessageTemplateGetSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\MessageTemplateGetSpecProvider
     */
    protected static function getMessageTemplateGetSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\MessageTemplateGetSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\MessageTemplateGetSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\NavigationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\NavigationSpecProvider
     */
    protected static function getNavigationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\NavigationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\NavigationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\NoteCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\NoteCreationSpecProvider
     */
    protected static function getNoteCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\NoteCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\NoteCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\OptionValueCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\OptionValueCreationSpecProvider
     */
    protected static function getOptionValueCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\OptionValueCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\OptionValueCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\PaymentProcessorCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\PaymentProcessorCreationSpecProvider
     */
    protected static function getPaymentProcessorCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\PaymentProcessorCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\PaymentProcessorCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\PaymentProcessorTypeCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\PaymentProcessorTypeCreationSpecProvider
     */
    protected static function getPaymentProcessorTypeCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\PaymentProcessorTypeCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\PaymentProcessorTypeCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\PhoneCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\PhoneCreationSpecProvider
     */
    protected static function getPhoneCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\PhoneCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\PhoneCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\PriceFieldValueCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\PriceFieldValueCreationSpecProvider
     */
    protected static function getPriceFieldValueCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\PriceFieldValueCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\PriceFieldValueCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\RelationshipCacheSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\RelationshipCacheSpecProvider
     */
    protected static function getRelationshipCacheSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\RelationshipCacheSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\RelationshipCacheSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\RelationshipTypeCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\RelationshipTypeCreationSpecProvider
     */
    protected static function getRelationshipTypeCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\RelationshipTypeCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\RelationshipTypeCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\SKEntitySpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\SKEntitySpecProvider
     */
    protected static function getSKEntitySpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\SKEntitySpecProvider'] = new \Civi\Api4\Service\Spec\Provider\SKEntitySpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\SearchDisplayCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\SearchDisplayCreationSpecProvider
     */
    protected static function getSearchDisplayCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\SearchDisplayCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\SearchDisplayCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\SearchSegmentExtraFieldProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\SearchSegmentExtraFieldProvider
     */
    protected static function getSearchSegmentExtraFieldProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\SearchSegmentExtraFieldProvider'] = new \Civi\Api4\Service\Spec\Provider\SearchSegmentExtraFieldProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\SearchSegmentSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\SearchSegmentSpecProvider
     */
    protected static function getSearchSegmentSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\SearchSegmentSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\SearchSegmentSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\TagCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\TagCreationSpecProvider
     */
    protected static function getTagCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\TagCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\TagCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\TitleFieldSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\TitleFieldSpecProvider
     */
    protected static function getTitleFieldSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\TitleFieldSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\TitleFieldSpecProvider();
    }

    /**
     * Gets the public 'Civi\Api4\Service\Spec\Provider\UFFieldCreationSpecProvider' shared service.
     *
     * @return \Civi\Api4\Service\Spec\Provider\UFFieldCreationSpecProvider
     */
    protected static function getUFFieldCreationSpecProviderService($container)
    {
        return $container->services['Civi\\Api4\\Service\\Spec\\Provider\\UFFieldCreationSpecProvider'] = new \Civi\Api4\Service\Spec\Provider\UFFieldCreationSpecProvider();
    }

    /**
     * Gets the public 'Civi\WorkflowMessage\TestBanner' shared service.
     *
     * @return \Civi\WorkflowMessage\TestBanner
     */
    protected static function getTestBannerService($container)
    {
        return $container->services['Civi\\WorkflowMessage\\TestBanner'] = new \Civi\WorkflowMessage\TestBanner();
    }

    /**
     * Gets the public 'action_object_provider' shared service.
     *
     * @return \Civi\Api4\Provider\ActionObjectProvider
     */
    protected static function getActionObjectProviderService($container)
    {
        return $container->services['action_object_provider'] = new \Civi\Api4\Provider\ActionObjectProvider();
    }

    /**
     * Gets the public 'angular' shared service.
     *
     * @return \Civi\Angular\Manager
     */
    protected static function getAngularService($container)
    {
        return $container->services['angular'] = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createAngularManager();
    }

    /**
     * Gets the public 'angularjs.loader' shared service.
     *
     * @return \Civi\Angular\AngularLoader
     */
    protected static function getAngularjs_LoaderService($container)
    {
        return $container->services['angularjs.loader'] = new \Civi\Angular\AngularLoader();
    }

    /**
     * Gets the public 'asset_builder' shared service.
     *
     * @return \Civi\Core\AssetBuilder
     */
    protected static function getAssetBuilderService($container)
    {
        return $container->services['asset_builder'] = new \Civi\Core\AssetBuilder();
    }

    /**
     * Gets the public 'bundle.bootstrap3' shared service.
     *
     * @return \CRM_Core_Resources_Bundle
     */
    protected static function getBundle_Bootstrap3Service($container)
    {
        return $container->services['bundle.bootstrap3'] = \CRM_Core_Resources_Common::createBootstrap3Bundle('bootstrap3');
    }

    /**
     * Gets the public 'bundle.coreResources' shared service.
     *
     * @return \CRM_Core_Resources_Bundle
     */
    protected static function getBundle_CoreResourcesService($container)
    {
        return $container->services['bundle.coreResources'] = \CRM_Core_Resources_Common::createFullBundle('coreResources');
    }

    /**
     * Gets the public 'bundle.coreStyles' shared service.
     *
     * @return \CRM_Core_Resources_Bundle
     */
    protected static function getBundle_CoreStylesService($container)
    {
        return $container->services['bundle.coreStyles'] = \CRM_Core_Resources_Common::createStyleBundle('coreStyles');
    }

    /**
     * Gets the public 'cache.checks' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_ChecksService($container)
    {
        return $container->services['cache.checks'] = \CRM_Utils_Cache::create(['name' => 'checks', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache']]);
    }

    /**
     * Gets the public 'cache.community_messages' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_CommunityMessagesService($container)
    {
        return $container->services['cache.community_messages'] = \CRM_Utils_Cache::create(['name' => 'community_messages', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache']]);
    }

    /**
     * Gets the public 'cache.contactTypes' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_ContactTypesService($container)
    {
        return $container->services['cache.contactTypes'] = \CRM_Utils_Cache::create(['name' => 'contactTypes', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.customData' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_CustomDataService($container)
    {
        return $container->services['cache.customData'] = \CRM_Utils_Cache::create(['name' => 'custom data', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.default' shared service.
     *
     * @return \CRM_Utils_Cache
     */
    protected static function getCache_DefaultService($container)
    {
        return $container->services['cache.default'] = \CRM_Utils_Cache::singleton();
    }

    /**
     * Gets the public 'cache.extension_browser' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_ExtensionBrowserService($container)
    {
        return $container->services['cache.extension_browser'] = \CRM_Utils_Cache::create(['name' => 'extension_browser', 'type' => ['SqlGroup', 'ArrayCache']]);
    }

    /**
     * Gets the public 'cache.fields' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_FieldsService($container)
    {
        return $container->services['cache.fields'] = \CRM_Utils_Cache::create(['name' => 'contact fields', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.groups' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_GroupsService($container)
    {
        return $container->services['cache.groups'] = \CRM_Utils_Cache::create(['name' => 'contact groups', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.js_strings' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_JsStringsService($container)
    {
        return $container->services['cache.js_strings'] = \CRM_Utils_Cache::create(['name' => 'js_strings', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.long' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_LongService($container)
    {
        return $container->services['cache.long'] = \CRM_Utils_Cache::create(['name' => 'long', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache']]);
    }

    /**
     * Gets the public 'cache.metadata' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_MetadataService($container)
    {
        return $container->services['cache.metadata'] = \CRM_Utils_Cache::create(['name' => 'metadata_5_66_1', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.navigation' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_NavigationService($container)
    {
        return $container->services['cache.navigation'] = \CRM_Utils_Cache::create(['name' => 'navigation', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache'], 'withArray' => 'fast']);
    }

    /**
     * Gets the public 'cache.prevNextCache' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_PrevNextCacheService($container)
    {
        return $container->services['cache.prevNextCache'] = \CRM_Utils_Cache::create(['name' => 'CiviCRM Search PrevNextCache', 'type' => ['SqlGroup']]);
    }

    /**
     * Gets the public 'cache.session' shared service.
     *
     * @return \CRM_Utils_Cache_Interface
     */
    protected static function getCache_SessionService($container)
    {
        return $container->services['cache.session'] = \CRM_Utils_Cache::create(['name' => 'CiviCRM Session', 'type' => ['*memory*', 'SqlGroup', 'ArrayCache']]);
    }

    /**
     * Gets the public 'cache_config' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getCacheConfigService($container)
    {
        return $container->services['cache_config'] = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createCacheConfig();
    }

    /**
     * Gets the public 'civi.activity.triggers' shared service.
     *
     * @return \Civi\Core\SqlTrigger\TimestampTriggers
     */
    protected static function getCivi_Activity_TriggersService($container)
    {
        return $container->services['civi.activity.triggers'] = new \Civi\Core\SqlTrigger\TimestampTriggers('civicrm_activity', 'Activity');
    }

    /**
     * Gets the public 'civi.api4.activitySchema' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\ActivitySchemaMapSubscriber
     */
    protected static function getCivi_Api4_ActivitySchemaService($container)
    {
        return $container->services['civi.api4.activitySchema'] = new \Civi\Api4\Event\Subscriber\ActivitySchemaMapSubscriber();
    }

    /**
     * Gets the public 'civi.api4.contactSchema' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\ContactSchemaMapSubscriber
     */
    protected static function getCivi_Api4_ContactSchemaService($container)
    {
        return $container->services['civi.api4.contactSchema'] = new \Civi\Api4\Event\Subscriber\ContactSchemaMapSubscriber();
    }

    /**
     * Gets the public 'civi.api4.isCurrent' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\IsCurrentSubscriber
     */
    protected static function getCivi_Api4_IsCurrentService($container)
    {
        return $container->services['civi.api4.isCurrent'] = new \Civi\Api4\Event\Subscriber\IsCurrentSubscriber();
    }

    /**
     * Gets the public 'civi.api4.messagetemplateSchema' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\MessageTemplateSchemaMapSubscriber
     */
    protected static function getCivi_Api4_MessagetemplateSchemaService($container)
    {
        return $container->services['civi.api4.messagetemplateSchema'] = new \Civi\Api4\Event\Subscriber\MessageTemplateSchemaMapSubscriber();
    }

    /**
     * Gets the public 'civi.api4.permissionCheck' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\PermissionCheckSubscriber
     */
    protected static function getCivi_Api4_PermissionCheckService($container)
    {
        return $container->services['civi.api4.permissionCheck'] = new \Civi\Api4\Event\Subscriber\PermissionCheckSubscriber();
    }

    /**
     * Gets the public 'civi.api4.searchKit' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\SearchKitSubscriber
     */
    protected static function getCivi_Api4_SearchKitService($container)
    {
        return $container->services['civi.api4.searchKit'] = new \Civi\Api4\Event\Subscriber\SearchKitSubscriber();
    }

    /**
     * Gets the public 'civi.api4.validateFields' shared service.
     *
     * @return \Civi\Api4\Event\Subscriber\ValidateFieldsSubscriber
     */
    protected static function getCivi_Api4_ValidateFieldsService($container)
    {
        return $container->services['civi.api4.validateFields'] = new \Civi\Api4\Event\Subscriber\ValidateFieldsSubscriber();
    }

    /**
     * Gets the public 'civi.case.staticTriggers' shared service.
     *
     * @return \Civi\Core\SqlTrigger\StaticTriggers
     */
    protected static function getCivi_Case_StaticTriggersService($container)
    {
        return $container->services['civi.case.staticTriggers'] = new \Civi\Core\SqlTrigger\StaticTriggers([['upgrade_check' => ['table' => 'civicrm_case', 'column' => 'modified_date'], 'table' => 'civicrm_case_activity', 'when' => 'AFTER', 'event' => ['INSERT'], 'sql' => 'UPDATE civicrm_case SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.case_id;'], ['upgrade_check' => ['table' => 'civicrm_case', 'column' => 'modified_date'], 'table' => 'civicrm_activity', 'when' => 'BEFORE', 'event' => ['UPDATE', 'DELETE'], 'sql' => 'UPDATE civicrm_case SET modified_date = CURRENT_TIMESTAMP WHERE id IN (SELECT ca.case_id FROM civicrm_case_activity ca WHERE ca.activity_id = OLD.id);']]);
    }

    /**
     * Gets the public 'civi.case.triggers' shared service.
     *
     * @return \Civi\Core\SqlTrigger\TimestampTriggers
     */
    protected static function getCivi_Case_TriggersService($container)
    {
        return $container->services['civi.case.triggers'] = new \Civi\Core\SqlTrigger\TimestampTriggers('civicrm_case', 'Case');
    }

    /**
     * Gets the public 'civi.pipe' service.
     *
     * @return \Civi\Pipe\PipeSession
     */
    protected static function getCivi_PipeService($container)
    {
        $container->factories['civi.pipe'] = function ($container) {
            return new \Civi\Pipe\PipeSession();
        };

        return $container->factories['civi.pipe']($container);
    }

    /**
     * Gets the public 'civi_api_kernel' shared service.
     *
     * @return \Civi\API\Kernel
     */
    protected static function getCiviApiKernelService($container)
    {
        $container->services['civi_api_kernel'] = $instance = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createApiKernel(($container->services['dispatcher'] ?? self::getDispatcherService($container)), ($container->services['magic_function_provider'] ??= new \Civi\API\Provider\MagicFunctionProvider()));

        $instance->registerApiProvider(($container->services['action_object_provider'] ??= new \Civi\Api4\Provider\ActionObjectProvider()));
        $instance->registerApiProvider(($container->services['civi_flexmailer_api_overrides'] ?? self::getCiviFlexmailerApiOverridesService($container)));

        return $instance;
    }

    /**
     * Gets the public 'civi_flexmailer_abdicator' shared service.
     *
     * @return \Civi\FlexMailer\Listener\Abdicator
     */
    protected static function getCiviFlexmailerAbdicatorService($container)
    {
        return $container->services['civi_flexmailer_abdicator'] = new \Civi\FlexMailer\Listener\Abdicator();
    }

    /**
     * Gets the public 'civi_flexmailer_api_overrides' shared service.
     *
     * @return \Civi\API\Provider\ProviderInterface
     */
    protected static function getCiviFlexmailerApiOverridesService($container)
    {
        return $container->services['civi_flexmailer_api_overrides'] = \Civi\FlexMailer\Services::createApiOverrides();
    }

    /**
     * Gets the public 'civi_flexmailer_attachments' shared service.
     *
     * @return \Civi\FlexMailer\Listener\Attachments
     */
    protected static function getCiviFlexmailerAttachmentsService($container)
    {
        return $container->services['civi_flexmailer_attachments'] = new \Civi\FlexMailer\Listener\Attachments();
    }

    /**
     * Gets the public 'civi_flexmailer_basic_headers' shared service.
     *
     * @return \Civi\FlexMailer\Listener\BasicHeaders
     */
    protected static function getCiviFlexmailerBasicHeadersService($container)
    {
        return $container->services['civi_flexmailer_basic_headers'] = new \Civi\FlexMailer\Listener\BasicHeaders();
    }

    /**
     * Gets the public 'civi_flexmailer_bounce_tracker' shared service.
     *
     * @return \Civi\FlexMailer\Listener\BounceTracker
     */
    protected static function getCiviFlexmailerBounceTrackerService($container)
    {
        return $container->services['civi_flexmailer_bounce_tracker'] = new \Civi\FlexMailer\Listener\BounceTracker();
    }

    /**
     * Gets the public 'civi_flexmailer_default_batcher' shared service.
     *
     * @return \Civi\FlexMailer\Listener\DefaultBatcher
     */
    protected static function getCiviFlexmailerDefaultBatcherService($container)
    {
        return $container->services['civi_flexmailer_default_batcher'] = new \Civi\FlexMailer\Listener\DefaultBatcher();
    }

    /**
     * Gets the public 'civi_flexmailer_default_composer' shared service.
     *
     * @return \Civi\FlexMailer\Listener\DefaultComposer
     */
    protected static function getCiviFlexmailerDefaultComposerService($container)
    {
        return $container->services['civi_flexmailer_default_composer'] = new \Civi\FlexMailer\Listener\DefaultComposer();
    }

    /**
     * Gets the public 'civi_flexmailer_default_sender' shared service.
     *
     * @return \Civi\FlexMailer\Listener\DefaultSender
     */
    protected static function getCiviFlexmailerDefaultSenderService($container)
    {
        return $container->services['civi_flexmailer_default_sender'] = new \Civi\FlexMailer\Listener\DefaultSender();
    }

    /**
     * Gets the public 'civi_flexmailer_hooks' shared service.
     *
     * @return \Civi\FlexMailer\Listener\HookAdapter
     */
    protected static function getCiviFlexmailerHooksService($container)
    {
        return $container->services['civi_flexmailer_hooks'] = new \Civi\FlexMailer\Listener\HookAdapter();
    }

    /**
     * Gets the public 'civi_flexmailer_html_click_tracker' shared service.
     *
     * @return \Civi\FlexMailer\ClickTracker\HtmlClickTracker
     */
    protected static function getCiviFlexmailerHtmlClickTrackerService($container)
    {
        return $container->services['civi_flexmailer_html_click_tracker'] = new \Civi\FlexMailer\ClickTracker\HtmlClickTracker();
    }

    /**
     * Gets the public 'civi_flexmailer_open_tracker' shared service.
     *
     * @return \Civi\FlexMailer\Listener\OpenTracker
     */
    protected static function getCiviFlexmailerOpenTrackerService($container)
    {
        return $container->services['civi_flexmailer_open_tracker'] = new \Civi\FlexMailer\Listener\OpenTracker();
    }

    /**
     * Gets the public 'civi_flexmailer_required_fields' shared service.
     *
     * @return \Civi\FlexMailer\Listener\RequiredFields
     */
    protected static function getCiviFlexmailerRequiredFieldsService($container)
    {
        return $container->services['civi_flexmailer_required_fields'] = new \Civi\FlexMailer\Listener\RequiredFields(['subject', 'name', 'from_name', 'from_email', '(body_html|body_text)']);
    }

    /**
     * Gets the public 'civi_flexmailer_required_tokens' shared service.
     *
     * @return \Civi\FlexMailer\Listener\RequiredTokens
     */
    protected static function getCiviFlexmailerRequiredTokensService($container)
    {
        return $container->services['civi_flexmailer_required_tokens'] = new \Civi\FlexMailer\Listener\RequiredTokens(['traditional'], ['domain.address' => 'Domain address - displays your organization\'s postal address.', 'action.optOutUrl or action.unsubscribeUrl' => ['action.optOut' => '\'Opt out via email\' - displays an email address for recipients to opt out of receiving emails from your organization.', 'action.optOutUrl' => '\'Opt out via web page\' - creates a link for recipients to click if they want to opt out of receiving emails from your organization. Alternatively, you can include the \'Opt out via email\' token.', 'action.unsubscribe' => '\'Unsubscribe via email\' - displays an email address for recipients to unsubscribe from the specific mailing list used to send this message.', 'action.unsubscribeUrl' => '\'Unsubscribe via web page\' - creates a link for recipients to unsubscribe from the specific mailing list used to send this message. Alternatively, you can include the \'Unsubscribe via email\' token or one of the Opt-out tokens.']]);
    }

    /**
     * Gets the public 'civi_flexmailer_test_prefix' shared service.
     *
     * @return \Civi\FlexMailer\Listener\TestPrefix
     */
    protected static function getCiviFlexmailerTestPrefixService($container)
    {
        return $container->services['civi_flexmailer_test_prefix'] = new \Civi\FlexMailer\Listener\TestPrefix();
    }

    /**
     * Gets the public 'civi_flexmailer_text_click_tracker' shared service.
     *
     * @return \Civi\FlexMailer\ClickTracker\TextClickTracker
     */
    protected static function getCiviFlexmailerTextClickTrackerService($container)
    {
        return $container->services['civi_flexmailer_text_click_tracker'] = new \Civi\FlexMailer\ClickTracker\TextClickTracker();
    }

    /**
     * Gets the public 'civi_flexmailer_to_header' shared service.
     *
     * @return \Civi\FlexMailer\Listener\ToHeader
     */
    protected static function getCiviFlexmailerToHeaderService($container)
    {
        return $container->services['civi_flexmailer_to_header'] = new \Civi\FlexMailer\Listener\ToHeader();
    }

    /**
     * Gets the public 'civi_token_compat' shared service.
     *
     * @return \Civi\Token\TokenCompatSubscriber
     */
    protected static function getCiviTokenCompatService($container)
    {
        return $container->services['civi_token_compat'] = new \Civi\Token\TokenCompatSubscriber();
    }

    /**
     * Gets the public 'civi_token_impliedcontext' shared service.
     *
     * @return \Civi\Token\ImpliedContextSubscriber
     */
    protected static function getCiviTokenImpliedcontextService($container)
    {
        return $container->services['civi_token_impliedcontext'] = new \Civi\Token\ImpliedContextSubscriber();
    }

    /**
     * Gets the public 'crm_activity_tokens' shared service.
     *
     * @return \CRM_Activity_Tokens
     */
    protected static function getCrmActivityTokensService($container)
    {
        return $container->services['crm_activity_tokens'] = new \CRM_Activity_Tokens();
    }

    /**
     * Gets the public 'crm_case_tokens' shared service.
     *
     * @return \CRM_Case_Tokens
     */
    protected static function getCrmCaseTokensService($container)
    {
        return $container->services['crm_case_tokens'] = new \CRM_Case_Tokens();
    }

    /**
     * Gets the public 'crm_contact_tokens' shared service.
     *
     * @return \CRM_Contact_Tokens
     */
    protected static function getCrmContactTokensService($container)
    {
        return $container->services['crm_contact_tokens'] = new \CRM_Contact_Tokens();
    }

    /**
     * Gets the public 'crm_contribute_tokens' shared service.
     *
     * @return \CRM_Contribute_Tokens
     */
    protected static function getCrmContributeTokensService($container)
    {
        return $container->services['crm_contribute_tokens'] = new \CRM_Contribute_Tokens();
    }

    /**
     * Gets the public 'crm_contribution_recur_tokens' shared service.
     *
     * @return \CRM_Contribute_RecurTokens
     */
    protected static function getCrmContributionRecurTokensService($container)
    {
        return $container->services['crm_contribution_recur_tokens'] = new \CRM_Contribute_RecurTokens();
    }

    /**
     * Gets the public 'crm_domain_tokens' shared service.
     *
     * @return \CRM_Core_DomainTokens
     */
    protected static function getCrmDomainTokensService($container)
    {
        return $container->services['crm_domain_tokens'] = new \CRM_Core_DomainTokens();
    }

    /**
     * Gets the public 'crm_event_tokens' shared service.
     *
     * @return \CRM_Event_Tokens
     */
    protected static function getCrmEventTokensService($container)
    {
        return $container->services['crm_event_tokens'] = new \CRM_Event_Tokens();
    }

    /**
     * Gets the public 'crm_group_tokens' shared service.
     *
     * @return \CRM_Core_GroupTokens
     */
    protected static function getCrmGroupTokensService($container)
    {
        return $container->services['crm_group_tokens'] = new \CRM_Core_GroupTokens();
    }

    /**
     * Gets the public 'crm_mailing_action_tokens' shared service.
     *
     * @return \CRM_Mailing_ActionTokens
     */
    protected static function getCrmMailingActionTokensService($container)
    {
        return $container->services['crm_mailing_action_tokens'] = new \CRM_Mailing_ActionTokens();
    }

    /**
     * Gets the public 'crm_mailing_tokens' shared service.
     *
     * @return \CRM_Mailing_Tokens
     */
    protected static function getCrmMailingTokensService($container)
    {
        return $container->services['crm_mailing_tokens'] = new \CRM_Mailing_Tokens();
    }

    /**
     * Gets the public 'crm_member_tokens' shared service.
     *
     * @return \CRM_Member_Tokens
     */
    protected static function getCrmMemberTokensService($container)
    {
        return $container->services['crm_member_tokens'] = new \CRM_Member_Tokens();
    }

    /**
     * Gets the public 'crm_participant_tokens' shared service.
     *
     * @return \CRM_Event_ParticipantTokens
     */
    protected static function getCrmParticipantTokensService($container)
    {
        return $container->services['crm_participant_tokens'] = new \CRM_Event_ParticipantTokens();
    }

    /**
     * Gets the public 'crm_pledge_tokens' shared service.
     *
     * @return \CRM_Pledge_Tokens
     */
    protected static function getCrmPledgeTokensService($container)
    {
        return $container->services['crm_pledge_tokens'] = new \CRM_Pledge_Tokens();
    }

    /**
     * Gets the public 'crm_survey_tokens' shared service.
     *
     * @return \CRM_Campaign_SurveyTokens
     */
    protected static function getCrmSurveyTokensService($container)
    {
        return $container->services['crm_survey_tokens'] = new \CRM_Campaign_SurveyTokens();
    }

    /**
     * Gets the public 'crm_token_tidy' shared service.
     *
     * @return \Civi\Token\TidySubscriber
     */
    protected static function getCrmTokenTidyService($container)
    {
        return $container->services['crm_token_tidy'] = new \Civi\Token\TidySubscriber();
    }

    /**
     * Gets the public 'crypto.jwt' shared service.
     *
     * @return \Civi\Crypto\CryptoJwt
     */
    protected static function getCrypto_JwtService($container)
    {
        return $container->services['crypto.jwt'] = new \Civi\Crypto\CryptoJwt();
    }

    /**
     * Gets the public 'crypto.registry' shared service.
     *
     * @return \Civi\Crypto\CryptoRegistry
     */
    protected static function getCrypto_RegistryService($container)
    {
        return $container->services['crypto.registry'] = \Civi\Crypto\CryptoRegistry::createDefaultRegistry();
    }

    /**
     * Gets the public 'crypto.token' shared service.
     *
     * @return \Civi\Crypto\CryptoToken
     */
    protected static function getCrypto_TokenService($container)
    {
        return $container->services['crypto.token'] = new \Civi\Crypto\CryptoToken();
    }

    /**
     * Gets the public 'cxn_reg_client' shared service.
     *
     * @return \Civi\Cxn\Rpc\RegistrationClient
     */
    protected static function getCxnRegClientService($container)
    {
        return $container->services['cxn_reg_client'] = \CRM_Cxn_BAO_Cxn::createRegistrationClient();
    }

    /**
     * Gets the public 'dispatcher' shared service.
     *
     * @return \Civi\Core\CiviEventDispatcher
     */
    protected static function getDispatcherService($container)
    {
        $container->services['dispatcher'] = $instance = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createEventDispatcher();

        $instance->addListenerMap('CRM_Core_BAO_LocationType', ['hook_civicrm_pre::LocationType' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Managed', ['hook_civicrm_post' => [['on_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Mapping', ['hook_civicrm_pre' => [['on_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_MessageTemplate', ['hook_civicrm_pre::MessageTemplate' => [['self_hook_civicrm_pre', 0]], '&hook_civicrm_translateFields' => [['hook_civicrm_translateFields', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_OptionGroup', ['hook_civicrm_pre::OptionGroup' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Translation', ['civi.api4.validate::Translation' => [['self_civi_api4_validate', 0]], 'hook_civicrm_post::Translation' => [['self_hook_civicrm_post', 0]], '&hook_civicrm_apiWrappers' => [['hook_civicrm_apiWrappers', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_RecurringEntity', ['civi.dao.postInsert' => [['triggerInsert']], 'civi.dao.postUpdate' => [['triggerUpdate']], 'civi.dao.postDelete' => [['triggerDelete']]]);
        $instance->addListenerMap('CRM_ACL_BAO_ACL', ['hook_civicrm_pre::ACL' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_Contact', ['hook_civicrm_post' => [['on_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_RelationshipType', ['hook_civicrm_pre::RelationshipType' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::RelationshipType' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_SavedSearch', ['hook_civicrm_pre::SavedSearch' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_ContactType', ['hook_civicrm_pre::ContactType' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::ContactType' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Batch_BAO_Batch', ['hook_civicrm_pre::Batch' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Mailing_BAO_MailingAB', ['hook_civicrm_post::MailingAB' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Financial_BAO_FinancialAccount', ['hook_civicrm_pre::FinancialAccount' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::FinancialAccount' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Financial_BAO_PaymentProcessorType', ['hook_civicrm_pre::PaymentProcessorType' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Financial_BAO_FinancialType', ['hook_civicrm_pre::FinancialType' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::FinancialType' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Member_BAO_MembershipStatus', ['hook_civicrm_pre::MembershipStatus' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Campaign_BAO_Survey', ['hook_civicrm_pre::Survey' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Case_BAO_CaseType', ['hook_civicrm_pre::CaseType' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::CaseType' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Queue_BAO_Queue', ['&hook_civicrm_queueRun_task' => [['hook_civicrm_queueRun_task', 0]]]);
        $instance->addListenerMap('CRM_PCP_BAO_PCP', ['hook_civicrm_pre::PCP' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_CustomGroup', ['hook_civicrm_post::CustomGroup' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Email', ['hook_civicrm_pre::Email' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::Email' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_IM', ['hook_civicrm_pre::IM' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Note', ['hook_civicrm_pre::Note' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_OptionValue', ['hook_civicrm_pre::OptionValue' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Phone', ['hook_civicrm_pre::Phone' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_UserJob', ['civi.queue.check' => [['on_civi_queue_check', 0]], '&hook_civicrm_queueStatus' => [['hook_civicrm_queueStatus', 0]], 'hook_civicrm_pre' => [['on_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_OpenID', ['hook_civicrm_pre::OpenID' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_WordReplacement', ['hook_civicrm_post::WordReplacement' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_SubscriptionHistory', ['hook_civicrm_pre::SubscriptionHistory' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Contribute_BAO_ContributionPage', ['hook_civicrm_post::ContributionPage' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Financial_BAO_PaymentProcessor', ['hook_civicrm_pre::PaymentProcessor' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::PaymentProcessor' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Member_BAO_MembershipType', ['hook_civicrm_pre' => [['on_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Case_BAO_Case', ['hook_civicrm_post' => [['on_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Case_BAO_CaseContact', ['hook_civicrm_post::CaseContact' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Report_BAO_ReportInstance', ['hook_civicrm_pre::ReportInstance' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Price_BAO_PriceSet', ['hook_civicrm_pre::PriceSet' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_County', ['hook_civicrm_post::County' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_UFGroup', ['hook_civicrm_pre::UFGroup' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_ActionSchedule', ['hook_civicrm_pre::ActionSchedule' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_Relationship', ['hook_civicrm_pre::Relationship' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::Relationship' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_RelationshipCache', ['hook_civicrm_triggerInfo' => [['on_hook_civicrm_triggerInfo', 0]]]);
        $instance->addListenerMap('CRM_Mailing_BAO_Mailing', ['hook_civicrm_pre::Mailing' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Contribute_BAO_ContributionRecur', ['hook_civicrm_post::ContributionRecur' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Core_BAO_Address', ['hook_civicrm_pre::Address' => [['self_hook_civicrm_pre', 0]], 'hook_civicrm_post::Address' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Contact_BAO_GroupContact', ['hook_civicrm_post::GroupContact' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Contribute_BAO_Contribution', ['hook_civicrm_post::Contribution' => [['self_hook_civicrm_post', 0]]]);
        $instance->addListenerMap('CRM_Event_BAO_Event', ['hook_civicrm_pre::Event' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Event_BAO_Participant', ['hook_civicrm_pre::Participant' => [['self_hook_civicrm_pre', 0]]]);
        $instance->addListenerMap('CRM_Pledge_BAO_PledgePayment', ['hook_civicrm_post' => [['on_hook_civicrm_post', 0]]]);
        $instance->addListener('civi.api4.authorizeRecord::Contribution', '_financialacls_civi_api4_authorizeContribution');
        $instance->addListenerService('civi.flexmailer.checkSendable', ['civi_flexmailer_abdicator', 'onCheckSendable'], 2000);
        $instance->addListenerService('civi.flexmailer.checkSendable', ['civi_flexmailer_required_fields', 'onCheckSendable'], 0);
        $instance->addListenerService('civi.flexmailer.checkSendable', ['civi_flexmailer_required_tokens', 'onCheckSendable'], 0);
        $instance->addListenerService('civi.flexmailer.run', ['civi_flexmailer_default_composer', 'onRun'], 0);
        $instance->addListenerService('civi.flexmailer.run', ['civi_flexmailer_abdicator', 'onRun'], -2000);
        $instance->addListenerService('civi.flexmailer.walk', ['civi_flexmailer_default_batcher', 'onWalk'], -2000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_basic_headers', 'onCompose'], 1000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_to_header', 'onCompose'], 1000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_bounce_tracker', 'onCompose'], 1000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_default_composer', 'onCompose'], -100);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_attachments', 'onCompose'], -1000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_open_tracker', 'onCompose'], -1000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_test_prefix', 'onCompose'], -1000);
        $instance->addListenerService('civi.flexmailer.compose', ['civi_flexmailer_hooks', 'onCompose'], -1100);
        $instance->addListenerService('civi.flexmailer.send', ['civi_flexmailer_default_sender', 'onSend'], -2000);
        $instance->addListener('civi.api4.authorizeRecord::SavedSearch', ['CRM_Search_BAO_SearchDisplay', 'savedSearchCheckAccessByDisplay']);
        $instance->addSubscriberServiceMap('CRM_Activity_ActionMapping', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Contact_ActionMapping', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Member_ActionMapping', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Contribute_ActionMapping_ByPage', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Contribute_ActionMapping_ByType', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Event_ActionMapping_ByEvent', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Event_ActionMapping_ByTemplate', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('CRM_Event_ActionMapping_ByType', ['civi.actionSchedule.getMappings' => [['onRegisterActionMappings']]]);
        $instance->addSubscriberServiceMap('esm.loader.browser', ['&civi.esm.useModule' => [['onUseModule']], '&civi.region.render' => [['onRegionRender']]]);
        $instance->addSubscriberServiceMap('esm.import_map', ['&hook_civicrm_esmImportMap' => [['hook_civicrm_esmImportMap', 0]]]);
        $instance->addSubscriberServiceMap('esm.loader.shim-fast', ['&civi.esm.useModule' => [['onUseModule']], '&civi.region.render' => [['onRegionRender']]]);
        $instance->addSubscriberServiceMap('esm.loader.shim-slow', ['&civi.esm.useModule' => [['onUseModule']], '&civi.region.render' => [['onRegionRender']]]);
        $instance->addSubscriberServiceMap('Civi\\WorkflowMessage\\TestBanner', ['&hook_civicrm_alterMailContent' => [['onAlterMailContent', -1000]]]);
        $instance->addSubscriberServiceMap('action_object_provider', ['civi.api.resolve' => [['onApiResolve', 100]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Provider\\CustomEntityProvider', ['civi.api4.entityTypes' => [['addCustomEntities', 100]]]);
        $instance->addSubscriberServiceMap('civi.api4.activitySchema', ['api.schema_map.build' => [['onSchemaBuild']]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Event\\Subscriber\\AutocompleteFieldSubscriber', ['civi.api.prepare' => [['onApiPrepare', 150]]]);
        $instance->addSubscriberServiceMap('civi.api4.contactSchema', ['api.schema_map.build' => [['onSchemaBuild']]]);
        $instance->addSubscriberServiceMap('civi.api4.isCurrent', ['civi.api.prepare' => [['onApiPrepare']]]);
        $instance->addSubscriberServiceMap('civi.api4.messagetemplateSchema', ['api.schema_map.build' => [['onSchemaBuild']]]);
        $instance->addSubscriberServiceMap('civi.api4.permissionCheck', ['civi.api.authorize' => [['onApiAuthorize', -100]]]);
        $instance->addSubscriberServiceMap('civi.api4.validateFields', ['civi.api.prepare' => [['onApiPrepare', 50]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\ActivityAutocompleteProvider', ['civi.search.autocompleteDefault' => [['on_civi_search_autocompleteDefault', 0]], 'civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\AddressAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\CaseAutocompleteProvider', ['civi.search.autocompleteDefault' => [['on_civi_search_autocompleteDefault', 0]], 'civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\ContactAutocompleteProvider', ['civi.api.prepare' => [['on_civi_api_prepare', 0]], 'civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\ContactTypeAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\ContributionAutocompleteProvider', ['civi.search.autocompleteDefault' => [['on_civi_search_autocompleteDefault', 0]], 'civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\ContributionRecurAutocompleteProvider', ['civi.search.autocompleteDefault' => [['on_civi_search_autocompleteDefault', 0]], 'civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\CountryAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\EntityAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\EventAutocompleteProvider', ['civi.api.prepare' => [['onApiPrepare', 140]], 'civi.search.defaultDisplay' => [['alterDefaultDisplay', -100]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\MailingRecipientsAutocompleteProvider', ['civi.search.autocompleteDefault' => [['mailingAutocompleteDefaultSearch', 50]], 'civi.search.defaultDisplay' => [['mailingAutocompleteDefaultDisplay', 50]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\OptionValueAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\PledgeAutocompleteProvider', ['civi.search.autocompleteDefault' => [['on_civi_search_autocompleteDefault', 0]], 'civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\RelationshipAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Service\\Autocomplete\\StateProvinceAutocompleteProvider', ['civi.search.defaultDisplay' => [['on_civi_search_defaultDisplay', 0]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Event\\Subscriber\\DefaultDisplaySubscriber', ['civi.search.defaultDisplay' => [['autocompleteDefault', -10], ['fallbackDefault', -20]]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Event\\Subscriber\\SKEntitySubscriber', ['civi.api4.entityTypes' => [['on_civi_api4_entityTypes']], 'hook_civicrm_pre' => [['onPreSaveDisplay']], 'hook_civicrm_post' => [['onPostSaveDisplay']]]);
        $instance->addSubscriberServiceMap('Civi\\Api4\\Event\\Subscriber\\SearchDisplayTasksSubscriber', ['hook_civicrm_searchKitTasks' => [['filterTasksForDisplay', -50]]]);
        $instance->addSubscriberServiceMap('civi.api4.searchKit', ['civi.api.authorize' => [['onApiAuthorize', -200]]]);
        $instance->addSubscriberServiceMap('Civi\\AfformReCaptcha2', ['civi.afform_admin.metadata' => [['onAfformGetMetadata']], 'hook_civicrm_alterAngular' => [['alterAngular']], 'civi.afform.validate' => [['onAfformValidate']]]);
        $instance->addListener('hook_civicrm_triggerInfo', [#[\Closure(name: 'civi.activity.triggers', class: 'Civi\\Core\\SqlTrigger\\TimestampTriggers')] fn () => ($container->services['civi.activity.triggers'] ??= new \Civi\Core\SqlTrigger\TimestampTriggers('civicrm_activity', 'Activity')), 'onTriggerInfo'], 0);
        $instance->addListener('hook_civicrm_triggerInfo', [#[\Closure(name: 'civi.case.triggers', class: 'Civi\\Core\\SqlTrigger\\TimestampTriggers')] fn () => ($container->services['civi.case.triggers'] ??= new \Civi\Core\SqlTrigger\TimestampTriggers('civicrm_case', 'Case')), 'onTriggerInfo'], 0);
        $instance->addListener('hook_civicrm_triggerInfo', [#[\Closure(name: 'civi.case.staticTriggers', class: 'Civi\\Core\\SqlTrigger\\StaticTriggers')] fn () => ($container->services['civi.case.staticTriggers'] ?? self::getCivi_Case_StaticTriggersService($container)), 'onTriggerInfo'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'civi_token_compat', class: 'Civi\\Token\\TokenCompatSubscriber')] fn () => ($container->services['civi_token_compat'] ??= new \Civi\Token\TokenCompatSubscriber()), 'setupSmartyAliases'], 1000);
        $instance->addListener('civi.token.render', [#[\Closure(name: 'civi_token_compat', class: 'Civi\\Token\\TokenCompatSubscriber')] fn () => ($container->services['civi_token_compat'] ??= new \Civi\Token\TokenCompatSubscriber()), 'onRender'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_mailing_action_tokens', class: 'CRM_Mailing_ActionTokens')] fn () => ($container->services['crm_mailing_action_tokens'] ??= new \CRM_Mailing_ActionTokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_mailing_action_tokens', class: 'CRM_Mailing_ActionTokens')] fn () => ($container->services['crm_mailing_action_tokens'] ??= new \CRM_Mailing_ActionTokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_mailing_action_tokens', class: 'CRM_Mailing_ActionTokens')] fn () => ($container->services['crm_mailing_action_tokens'] ??= new \CRM_Mailing_ActionTokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_activity_tokens', class: 'CRM_Activity_Tokens')] fn () => ($container->services['crm_activity_tokens'] ??= new \CRM_Activity_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_activity_tokens', class: 'CRM_Activity_Tokens')] fn () => ($container->services['crm_activity_tokens'] ??= new \CRM_Activity_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_activity_tokens', class: 'CRM_Activity_Tokens')] fn () => ($container->services['crm_activity_tokens'] ??= new \CRM_Activity_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_contact_tokens', class: 'CRM_Contact_Tokens')] fn () => ($container->services['crm_contact_tokens'] ??= new \CRM_Contact_Tokens()), 'evaluateLegacyHookTokens'], 500);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_contact_tokens', class: 'CRM_Contact_Tokens')] fn () => ($container->services['crm_contact_tokens'] ??= new \CRM_Contact_Tokens()), 'onEvaluate'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_contact_tokens', class: 'CRM_Contact_Tokens')] fn () => ($container->services['crm_contact_tokens'] ??= new \CRM_Contact_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_contribute_tokens', class: 'CRM_Contribute_Tokens')] fn () => ($container->services['crm_contribute_tokens'] ??= new \CRM_Contribute_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_contribute_tokens', class: 'CRM_Contribute_Tokens')] fn () => ($container->services['crm_contribute_tokens'] ??= new \CRM_Contribute_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_contribute_tokens', class: 'CRM_Contribute_Tokens')] fn () => ($container->services['crm_contribute_tokens'] ??= new \CRM_Contribute_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_event_tokens', class: 'CRM_Event_Tokens')] fn () => ($container->services['crm_event_tokens'] ??= new \CRM_Event_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_event_tokens', class: 'CRM_Event_Tokens')] fn () => ($container->services['crm_event_tokens'] ??= new \CRM_Event_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_event_tokens', class: 'CRM_Event_Tokens')] fn () => ($container->services['crm_event_tokens'] ??= new \CRM_Event_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_mailing_tokens', class: 'CRM_Mailing_Tokens')] fn () => ($container->services['crm_mailing_tokens'] ??= new \CRM_Mailing_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_mailing_tokens', class: 'CRM_Mailing_Tokens')] fn () => ($container->services['crm_mailing_tokens'] ??= new \CRM_Mailing_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_mailing_tokens', class: 'CRM_Mailing_Tokens')] fn () => ($container->services['crm_mailing_tokens'] ??= new \CRM_Mailing_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_member_tokens', class: 'CRM_Member_Tokens')] fn () => ($container->services['crm_member_tokens'] ??= new \CRM_Member_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_member_tokens', class: 'CRM_Member_Tokens')] fn () => ($container->services['crm_member_tokens'] ??= new \CRM_Member_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_member_tokens', class: 'CRM_Member_Tokens')] fn () => ($container->services['crm_member_tokens'] ??= new \CRM_Member_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_case_tokens', class: 'CRM_Case_Tokens')] fn () => ($container->services['crm_case_tokens'] ??= new \CRM_Case_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_case_tokens', class: 'CRM_Case_Tokens')] fn () => ($container->services['crm_case_tokens'] ??= new \CRM_Case_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_case_tokens', class: 'CRM_Case_Tokens')] fn () => ($container->services['crm_case_tokens'] ??= new \CRM_Case_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_pledge_tokens', class: 'CRM_Pledge_Tokens')] fn () => ($container->services['crm_pledge_tokens'] ??= new \CRM_Pledge_Tokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_pledge_tokens', class: 'CRM_Pledge_Tokens')] fn () => ($container->services['crm_pledge_tokens'] ??= new \CRM_Pledge_Tokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_pledge_tokens', class: 'CRM_Pledge_Tokens')] fn () => ($container->services['crm_pledge_tokens'] ??= new \CRM_Pledge_Tokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'civi_token_impliedcontext', class: 'Civi\\Token\\ImpliedContextSubscriber')] fn () => ($container->services['civi_token_impliedcontext'] ??= new \Civi\Token\ImpliedContextSubscriber()), 'onRegisterTokens'], 1000);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'civi_token_impliedcontext', class: 'Civi\\Token\\ImpliedContextSubscriber')] fn () => ($container->services['civi_token_impliedcontext'] ??= new \Civi\Token\ImpliedContextSubscriber()), 'onEvaluateTokens'], 1000);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_participant_tokens', class: 'CRM_Event_ParticipantTokens')] fn () => ($container->services['crm_participant_tokens'] ??= new \CRM_Event_ParticipantTokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_participant_tokens', class: 'CRM_Event_ParticipantTokens')] fn () => ($container->services['crm_participant_tokens'] ??= new \CRM_Event_ParticipantTokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_participant_tokens', class: 'CRM_Event_ParticipantTokens')] fn () => ($container->services['crm_participant_tokens'] ??= new \CRM_Event_ParticipantTokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_contribution_recur_tokens', class: 'CRM_Contribute_RecurTokens')] fn () => ($container->services['crm_contribution_recur_tokens'] ??= new \CRM_Contribute_RecurTokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_contribution_recur_tokens', class: 'CRM_Contribute_RecurTokens')] fn () => ($container->services['crm_contribution_recur_tokens'] ??= new \CRM_Contribute_RecurTokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_contribution_recur_tokens', class: 'CRM_Contribute_RecurTokens')] fn () => ($container->services['crm_contribution_recur_tokens'] ??= new \CRM_Contribute_RecurTokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_survey_tokens', class: 'CRM_Campaign_SurveyTokens')] fn () => ($container->services['crm_survey_tokens'] ??= new \CRM_Campaign_SurveyTokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_survey_tokens', class: 'CRM_Campaign_SurveyTokens')] fn () => ($container->services['crm_survey_tokens'] ??= new \CRM_Campaign_SurveyTokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_survey_tokens', class: 'CRM_Campaign_SurveyTokens')] fn () => ($container->services['crm_survey_tokens'] ??= new \CRM_Campaign_SurveyTokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_group_tokens', class: 'CRM_Core_GroupTokens')] fn () => ($container->services['crm_group_tokens'] ??= new \CRM_Core_GroupTokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_group_tokens', class: 'CRM_Core_GroupTokens')] fn () => ($container->services['crm_group_tokens'] ??= new \CRM_Core_GroupTokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_group_tokens', class: 'CRM_Core_GroupTokens')] fn () => ($container->services['crm_group_tokens'] ??= new \CRM_Core_GroupTokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.list', [#[\Closure(name: 'crm_domain_tokens', class: 'CRM_Core_DomainTokens')] fn () => ($container->services['crm_domain_tokens'] ??= new \CRM_Core_DomainTokens()), 'registerTokens'], 0);
        $instance->addListener('civi.token.eval', [#[\Closure(name: 'crm_domain_tokens', class: 'CRM_Core_DomainTokens')] fn () => ($container->services['crm_domain_tokens'] ??= new \CRM_Core_DomainTokens()), 'evaluateTokens'], 0);
        $instance->addListener('civi.actionSchedule.prepareMailingQuery', [#[\Closure(name: 'crm_domain_tokens', class: 'CRM_Core_DomainTokens')] fn () => ($container->services['crm_domain_tokens'] ??= new \CRM_Core_DomainTokens()), 'alterActionScheduleQuery'], 0);
        $instance->addListener('civi.token.render', [#[\Closure(name: 'crm_token_tidy', class: '\\Civi\\Token\\TidySubscriber')] fn () => ($container->services['crm_token_tidy'] ??= new \Civi\Token\TidySubscriber()), 'tidyHtml'], 1000);

        return $instance;
    }

    /**
     * Gets the public 'esm.import_map' shared service.
     *
     * @return \Civi\Esm\ImportMap
     */
    protected static function getEsm_ImportMapService($container)
    {
        return $container->services['esm.import_map'] = new \Civi\Esm\ImportMap();
    }

    /**
     * Gets the public 'esm.loader' shared service.
     *
     * @return \object
     */
    protected static function getEsm_LoaderService($container)
    {
        return $container->services['esm.loader'] = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createEsmLoader($container);
    }

    /**
     * Gets the public 'esm.loader.browser' shared service.
     *
     * @return \Civi\Esm\BrowserLoader
     */
    protected static function getEsm_Loader_BrowserService($container)
    {
        $container->services['esm.loader.browser'] = $instance = new \Civi\Esm\BrowserLoader();

        $instance->injectPrivateProperty('importMap', ($container->services['esm.import_map'] ??= new \Civi\Esm\ImportMap()));

        return $instance;
    }

    /**
     * Gets the public 'esm.loader.shim-fast' shared service.
     *
     * @return \Civi\Esm\ShimLoader
     */
    protected static function getEsm_Loader_ShimfastService($container)
    {
        $container->services['esm.loader.shim-fast'] = $instance = \Civi\Esm\ShimLoader::createFashShim();

        $instance->injectPrivateProperty('importMap', ($container->services['esm.import_map'] ??= new \Civi\Esm\ImportMap()));

        return $instance;
    }

    /**
     * Gets the public 'esm.loader.shim-slow' shared service.
     *
     * @return \Civi\Esm\ShimLoader
     */
    protected static function getEsm_Loader_ShimslowService($container)
    {
        $container->services['esm.loader.shim-slow'] = $instance = \Civi\Esm\ShimLoader::createSlowShim();

        $instance->injectPrivateProperty('importMap', ($container->services['esm.import_map'] ??= new \Civi\Esm\ImportMap()));

        return $instance;
    }

    /**
     * Gets the public 'format' shared service.
     *
     * @return \Civi\Core\Format
     */
    protected static function getFormatService($container)
    {
        return $container->services['format'] = new \Civi\Core\Format();
    }

    /**
     * Gets the public 'httpClient' shared service.
     *
     * @return \CRM_Utils_HttpClient
     */
    protected static function getHttpClientService($container)
    {
        return $container->services['httpClient'] = \CRM_Utils_HttpClient::singleton();
    }

    /**
     * Gets the public 'i18n' shared service.
     *
     * @return \CRM_Core_I18n
     */
    protected static function getI18nService($container)
    {
        return $container->services['i18n'] = \CRM_Core_I18n::singleton();
    }

    /**
     * Gets the public 'magic_function_provider' shared service.
     *
     * @return \Civi\API\Provider\MagicFunctionProvider
     */
    protected static function getMagicFunctionProviderService($container)
    {
        return $container->services['magic_function_provider'] = new \Civi\API\Provider\MagicFunctionProvider();
    }

    /**
     * Gets the public 'pear_mail' shared service.
     *
     * @return \Mail
     */
    protected static function getPearMailService($container)
    {
        return $container->services['pear_mail'] = \CRM_Utils_Mail::createMailer();
    }

    /**
     * Gets the public 'prevnext' shared service.
     *
     * @return \CRM_Core_PrevNextCache_Interface
     */
    protected static function getPrevnextService($container)
    {
        return $container->services['prevnext'] = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createPrevNextCache($container);
    }

    /**
     * Gets the public 'prevnext.driver.redis' shared service.
     *
     * @return \CRM_Core_PrevNextCache_Redis
     */
    protected static function getPrevnext_Driver_RedisService($container)
    {
        return $container->services['prevnext.driver.redis'] = new \CRM_Core_PrevNextCache_Redis(($container->services['cache_config'] ?? self::getCacheConfigService($container)));
    }

    /**
     * Gets the public 'prevnext.driver.sql' shared service.
     *
     * @return \CRM_Core_PrevNextCache_Sql
     */
    protected static function getPrevnext_Driver_SqlService($container)
    {
        return $container->services['prevnext.driver.sql'] = new \CRM_Core_PrevNextCache_Sql();
    }

    /**
     * Gets the public 'psr_log' shared service.
     *
     * @return \CRM_Core_Error_Log
     */
    protected static function getPsrLogService($container)
    {
        return $container->services['psr_log'] = new \CRM_Core_Error_Log();
    }

    /**
     * Gets the public 'psr_log_manager' shared service.
     *
     * @return \Civi\Core\LogManager
     */
    protected static function getPsrLogManagerService($container)
    {
        return $container->services['psr_log_manager'] = new \Civi\Core\LogManager();
    }

    /**
     * Gets the public 'resources' shared service.
     *
     * @return \CRM_Core_Resources
     */
    protected static function getResourcesService($container)
    {
        return $container->services['resources'] = ($container->privates['civi_container_factory'] ??= new \Civi\Core\Container())->createResources($container);
    }

    /**
     * Gets the public 'resources.js_strings' shared service.
     *
     * @return \CRM_Core_Resources_Strings
     */
    protected static function getResources_JsStringsService($container)
    {
        return $container->services['resources.js_strings'] = new \CRM_Core_Resources_Strings(($container->services['cache.js_strings'] ?? self::getCache_JsStringsService($container)));
    }

    /**
     * Gets the public 'schema_map_builder' shared service.
     *
     * @return \Civi\Api4\Service\Schema\SchemaMapBuilder
     */
    protected static function getSchemaMapBuilderService($container)
    {
        $a = ($container->services['dispatcher'] ?? self::getDispatcherService($container));

        $container->services['schema_map_builder'] = $instance = new \Civi\Api4\Service\Schema\SchemaMapBuilder($a);

        $instance->__construct($a);

        return $instance;
    }

    /**
     * Gets the public 'spec_gatherer' shared service.
     *
     * @return \Civi\Api4\Service\Spec\SpecGatherer
     */
    protected static function getSpecGathererService($container)
    {
        $container->services['spec_gatherer'] = $instance = new \Civi\Api4\Service\Spec\SpecGatherer();

        $instance->addSpecProvider(($container->services['CRM_Activity_ActionMapping'] ??= new \CRM_Activity_ActionMapping()));
        $instance->addSpecProvider(($container->services['CRM_Contact_ActionMapping'] ??= new \CRM_Contact_ActionMapping()));
        $instance->addSpecProvider(($container->services['CRM_Member_ActionMapping'] ??= new \CRM_Member_ActionMapping()));
        $instance->addSpecProvider(($container->services['CRM_Contribute_ActionMapping_ByPage'] ??= new \CRM_Contribute_ActionMapping_ByPage()));
        $instance->addSpecProvider(($container->services['CRM_Contribute_ActionMapping_ByType'] ??= new \CRM_Contribute_ActionMapping_ByType()));
        $instance->addSpecProvider(($container->services['CRM_Event_ActionMapping_ByEvent'] ??= new \CRM_Event_ActionMapping_ByEvent()));
        $instance->addSpecProvider(($container->services['CRM_Event_ActionMapping_ByTemplate'] ??= new \CRM_Event_ActionMapping_ByTemplate()));
        $instance->addSpecProvider(($container->services['CRM_Event_ActionMapping_ByType'] ??= new \CRM_Event_ActionMapping_ByType()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\SearchSegmentExtraFieldProvider'] ??= new \Civi\Api4\Service\Spec\Provider\SearchSegmentExtraFieldProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ACLCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ACLCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ActionScheduleSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ActionScheduleSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ActivitySpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ActivitySpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\AddressCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\AddressCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\AddressGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\AddressGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\BatchCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\BatchCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContactCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ContactCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContactGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ContactGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContactTypeCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ContactTypeCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\CustomFieldCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\CustomFieldCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\CustomValueSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\CustomValueSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\DefaultLocationTypeProvider'] ??= new \Civi\Api4\Service\Spec\Provider\DefaultLocationTypeProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\DomainCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\DomainCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\DomainGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\DomainGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\EmailCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\EmailCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\EmailGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\EmailGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\EntityBatchCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\EntityBatchCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\EntityTagCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\EntityTagCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\EntityTagFilterSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\EntityTagFilterSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\FieldCurrencySpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\FieldCurrencySpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\FieldDomainIdSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\FieldDomainIdSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\GetActionDefaultsProvider'] ??= new \Civi\Api4\Service\Spec\Provider\GetActionDefaultsProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\GroupContactCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\GroupContactCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\GroupCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\GroupCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\GroupGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\GroupGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\IMCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\IMCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\IsCurrentFieldSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\IsCurrentFieldSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\MailingGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\MailingGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ManagedEntitySpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ManagedEntitySpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\MessageTemplateGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\MessageTemplateGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\NavigationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\NavigationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\NoteCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\NoteCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\OptionValueCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\OptionValueCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\PhoneCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\PhoneCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\RelationshipCacheSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\RelationshipCacheSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\RelationshipTypeCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\RelationshipTypeCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\TagCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\TagCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\TitleFieldSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\TitleFieldSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\UFFieldCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\UFFieldCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContributionCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ContributionCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContributionGetSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ContributionGetSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\ContributionRecurCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\ContributionRecurCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\FinancialItemCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\FinancialItemCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\FinancialTrxnCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\FinancialTrxnCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\PaymentProcessorCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\PaymentProcessorCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\PaymentProcessorTypeCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\PaymentProcessorTypeCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\PriceFieldValueCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\PriceFieldValueCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\EventCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\EventCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\MembershipCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\MembershipCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\MembershipTypeCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\MembershipTypeCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\SKEntitySpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\SKEntitySpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\SearchDisplayCreationSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\SearchDisplayCreationSpecProvider()));
        $instance->addSpecProvider(($container->services['Civi\\Api4\\Service\\Spec\\Provider\\SearchSegmentSpecProvider'] ??= new \Civi\Api4\Service\Spec\Provider\SearchSegmentSpecProvider()));

        return $instance;
    }

    /**
     * Gets the public 'sql_triggers' shared service.
     *
     * @return \Civi\Core\SqlTriggers
     */
    protected static function getSqlTriggersService($container)
    {
        return $container->services['sql_triggers'] = new \Civi\Core\SqlTriggers();
    }

    /**
     * Gets the public 'themes' shared service.
     *
     * @return \Civi\Core\Themes
     */
    protected static function getThemesService($container)
    {
        return $container->services['themes'] = new \Civi\Core\Themes();
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new ParameterNotFoundException($name);
    }

    protected function getDefaultParameters(): array
    {
        return [
            'civicrm_base_path' => '/home/isrpas/d10.surfershealing.org/vendor/civicrm/civicrm-core',
        ];
    }
}
